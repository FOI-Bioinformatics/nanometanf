/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    foi-bioinformatics/nanometanf Nextflow config file for PromethION (8 samples)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Optimized configuration for PromethION sequencing with moderate multiplexing

    Key optimizations:
    - Balanced parallelization for 8 barcodes
    - Moderate per-process CPU allocation (6 CPUs) - balance speed and throughput
    - Real-time optimizations enabled
    - Database memory-mapping for batch efficiency

    Target hardware: PromethION without GPU (16-24 cores recommended)
    Expected dataset: 1-3M reads, 5-20 GB, 8 barcodes, 20+ batches
    Strategy: Balance between per-sample speed and parallel throughput
----------------------------------------------------------------------------------------
*/

params {
    // Automatically enable real-time optimizations
    realtime_mode = true

    // Phase 1 optimizations (tuned for 8 samples)
    kraken2_enable_incremental = true
    qc_enable_incremental = true
    nanoplot_realtime_skip_intermediate = true
    nanoplot_batch_interval = 7          // Every 7th batch (between MinION and PromethION 24)
    multiqc_realtime_final_only = true

    // Phase 2 optimization (auto-enabled in real-time mode)
    // Database preloading via memory-mapping handled automatically
}

process {
    // PromethION-8 optimization: Balanced resource allocation
    // Trade-off: Moderate per-sample speed with moderate parallelism
    //
    // Example: With 24 total CPUs
    //   MinION (8 CPUs/process): 3 samples in parallel, fastest per-sample
    //   PromethION-8 (6 CPUs/process): 4 samples in parallel, balanced
    //   PromethION-24 (4 CPUs/process): 6 samples in parallel, highest throughput

    withName:'KRAKEN2_KRAKEN2' {
        cpus   = { 6     * task.attempt }  // Balanced allocation
        memory = { 48.GB * task.attempt }  // Balanced memory
        time   = { 8.h   * task.attempt }
    }

    withName:'KRAKEN2_OPTIMIZED' {
        cpus   = { 6     * task.attempt }  // Balanced allocation
        memory = { 48.GB * task.attempt }  // Balanced memory
        time   = { 8.h   * task.attempt }
    }

    withName:'KRAKEN2_INCREMENTAL_CLASSIFIER' {
        cpus   = { 6     * task.attempt }  // Balanced allocation
        memory = { 48.GB * task.attempt }  // Balanced memory
        time   = { 8.h   * task.attempt }
    }

    withName:'FASTP' {
        cpus   = { 3     * task.attempt }  // Balanced between MinION (4) and PromethION (2)
        memory = { 6.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'CHOPPER' {
        cpus   = { 3     * task.attempt }  // Matched with FASTP
        memory = { 6.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'FILTLONG' {
        cpus   = { 3     * task.attempt }
        memory = { 6.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'NANOPLOT' {
        cpus   = { 2     * task.attempt }  // Standard allocation
        memory = { 9.GB  * task.attempt }  // Between MinION (12GB) and PromethION (6GB)
        time   = { 4.h   * task.attempt }
    }

    withName:'SEQKIT_STATS' {
        cpus   = { 2     * task.attempt }
        memory = { 3.GB  * task.attempt }
        time   = { 2.h   * task.attempt }
    }

    withName:'DORADO_BASECALLER' {
        cpus   = { 6     * task.attempt }  // Balanced allocation
        memory = { 16.GB * task.attempt }
        time   = { 12.h  * task.attempt }
    }
}

executor {
    // Moderate concurrency for 8 parallel barcodes
    queueSize = 24              // 8 barcodes × 3 batches in queue
    pollInterval = '7 sec'      // Between MinION (10s) and PromethION (5s)
    queueStatInterval = '90 sec' // Between MinION (2min) and PromethION (1min)
}

// PromethION-8 strategy explanation
/*
======================================================================================
PROMETHION-8 PARALLELIZATION STRATEGY
======================================================================================

Scenario: 8 barcodes, 20 batches, PromethION CPU-only system (16-24 cores)

Pipeline Parallelization Model:
  - Balanced approach between MinION and PromethION-24
  - 8 barcodes × 20 batches = 160 total tasks
  - Optimized for medium-scale multiplexing

Example Timeline (24-core system):

  MinION profile (8 CPUs/Kraken2):
    - Can run 3 Kraken2 tasks in parallel (24 / 8 = 3)
    - Fastest per-sample speed
    - Total time: ~160 / 3 × 3min = 160 minutes

  PromethION-8 profile (6 CPUs/Kraken2):
    - Can run 4 Kraken2 tasks in parallel (24 / 6 = 4)
    - Balanced speed and throughput
    - Total time: ~160 / 4 × 3.5min = 140 minutes

  PromethION-24 profile (4 CPUs/Kraken2):
    - Can run 6 Kraken2 tasks in parallel (24 / 4 = 6)
    - Highest throughput, slower per-sample
    - Total time: ~160 / 6 × 5min = 133 minutes

Key Benefits:
  1. Balanced performance: Good per-sample speed + good throughput
  2. Optimal for 8-12 samples with 16-24 cores
  3. Better per-sample speed than PromethION-24
  4. Better parallelism than MinION
  5. Real-time responsiveness: Fast batch processing

Automatic Optimizations (Phase 1 & 2):
  ✓ Incremental Kraken2: Avoid re-classification
  ✓ QC stats aggregation: Eliminate redundant computations
  ✓ Conditional NanoPlot: Every 7th batch (balanced frequency)
  ✓ Deferred MultiQC: Run once at end
  ✓ Database preloading: Memory-mapped database caching

Usage:
  nextflow run foi-bioinformatics/nanometanf \\
    -profile promethion_8 \\
    --input samplesheet.csv \\
    --realtime_mode \\
    --nanopore_output_dir /sequencing/output \\
    --kraken2_db /databases/kraken2 \\
    --max_cpus 24 \\
    --max_memory 96.GB \\
    --outdir results/

Typical Hardware:
  - PromethION P24/P48: 16-32 cores, 64-128 GB RAM
  - Optimized for 8-12 barcode multiplexing

======================================================================================
*/
