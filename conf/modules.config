/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        // Reduce memory for development/testing
        memory = { 8.GB * task.attempt }
        cpus = { 4 * task.attempt }
    }

    withName: 'CHOPPER' {
        ext.args2 = [
            params.chopper_quality ? "--quality ${params.chopper_quality}" : '',
            params.chopper_minlength ? "--minlength ${params.chopper_minlength}" : '',
            params.chopper_maxlength ? "--maxlength ${params.chopper_maxlength}" : '',
            params.chopper_headcrop ? "--headcrop ${params.chopper_headcrop}" : '',
            params.chopper_tailcrop ? "--tailcrop ${params.chopper_tailcrop}" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_filtered" }
        // Reduce memory for development/testing (default is 36 GB from process_medium)
        memory = { 8.GB * task.attempt }
        cpus = { 4 * task.attempt }
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KRAKEN2_KRAKEN2' {
        // Reduce memory for development/testing with MiniKraken2 database (8GB)
        // Standard Kraken2 module uses process_high (72 GB) which is too much for dev environments
        memory = { 12.GB * task.attempt }  // 12GB for 8GB database + overhead
        cpus = { 8 * task.attempt }
    }

    withName: 'KRAKEN2_INCREMENTAL_CLASSIFIER' {
        // Incremental classification with batch caching (PromethION optimization)
        // Same resource requirements as standard KRAKEN2_KRAKEN2
        memory = { 12.GB * task.attempt }  // 12GB for 8GB database + overhead
        cpus = { 8 * task.attempt }
        publishDir = [
            [
                path: { "${params.outdir}/kraken2/${meta.id}/reports" },
                mode: params.publish_dir_mode,
                pattern: "*.report.txt",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { params.kraken2_cache_dir ?: "${params.outdir}/cache/kraken2/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "cache/*.kraken2",
                enabled: params.kraken2_enable_incremental
            ],
            [
                path: { params.kraken2_cache_dir ?: "${params.outdir}/cache/kraken2/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "cache/*.json",
                enabled: params.kraken2_enable_incremental
            ]
        ]
    }

    withName: 'KRAKEN2_OUTPUT_MERGER' {
        // Lightweight concatenation of batch .kraken2 files
        // process_low label: minimal resources needed for cat operations
        memory = { 4.GB * task.attempt }
        cpus = { 2 * task.attempt }
        publishDir = [
            [
                path: { "${params.outdir}/kraken2/${meta.id}/cumulative" },
                mode: params.publish_dir_mode,
                pattern: "*.cumulative.kraken2",
                enabled: params.kraken2_enable_incremental,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/kraken2/${meta.id}/manifests" },
                mode: params.publish_dir_mode,
                pattern: "*.json",
                enabled: params.kraken2_enable_incremental
            ]
        ]
    }

    withName: 'KRAKEN2_REPORT_GENERATOR' {
        // Generate cumulative reports using KrakenTools
        // process_low label: KrakenTools combine_kreports.py is lightweight
        memory = { 6.GB * task.attempt }
        cpus = { 2 * task.attempt }
        publishDir = [
            [
                path: { "${params.outdir}/kraken2/${meta.id}/reports" },
                mode: params.publish_dir_mode,
                pattern: "*.cumulative.report.txt",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/kraken2/${meta.id}/stats" },
                mode: params.publish_dir_mode,
                pattern: "*.json"
            ]
        ]
    }

    withName: 'NANOPLOT' {
        // Reduce memory for development/testing environments
        // NanoPlot can request large amounts of memory on retry (up to 24GB+)
        // Cap at 8GB base, 16GB on first retry (within 18GB system limit)
        memory = { 8.GB * task.attempt }
        cpus = { 4 * task.attempt }
    }

    withName: 'SEQKIT_MERGE_STATS' {
        // QC statistics aggregation (PromethION optimization)
        // Lightweight Python-based weighted statistical calculations
        memory = { 2.GB * task.attempt }
        cpus = { 1 * task.attempt }
        publishDir = [
            [
                path: { "${params.outdir}/qc/${meta.id}/stats" },
                mode: params.publish_dir_mode,
                pattern: "*.cumulative.tsv",
                enabled: params.qc_enable_incremental,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/qc/${meta.id}/manifests" },
                mode: params.publish_dir_mode,
                pattern: "*.json",
                enabled: params.qc_enable_incremental
            ]
        ]
    }

}
