/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    foi-bioinformatics/nanometanf Nextflow config file for MinION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Optimized configuration for MinION sequencing platform

    Key optimizations:
    - Single-sample focus: Maximize per-sample processing speed
    - High per-process CPU allocation for faster completion
    - Real-time optimizations for incremental data processing
    - Database memory-mapping for batch efficiency

    Target hardware: MinION/GridION without GPU
    Expected dataset: Single sample or low multiplexing (1-4 barcodes), 100K-1M reads
    Strategy: Speed over parallelism - complete each sample as fast as possible
----------------------------------------------------------------------------------------
*/

params {
    // Automatically enable real-time optimizations
    realtime_mode = true

    // Phase 1 optimizations (tuned for single sample)
    kraken2_enable_incremental = true
    qc_enable_incremental = true
    nanoplot_realtime_skip_intermediate = true
    nanoplot_batch_interval = 5          // More frequent for single sample (every 5th batch)
    multiqc_realtime_final_only = true

    // Phase 2 optimization (auto-enabled in real-time mode)
    // Database preloading via memory-mapping handled automatically
}

process {
    // MinION optimization: Maximize per-process resources for fastest single-sample completion
    // Trade-off: Higher per-sample speed, lower parallelism (suitable for 1-4 samples)
    //
    // Example: With 8 total CPUs, single sample
    //   MinION (8 CPUs/process): 1 sample completes in minimum time
    //   PromethION (4 CPUs/process): Same sample takes longer, but could run 2 in parallel

    withName:'KRAKEN2_KRAKEN2' {
        cpus   = { 8     * task.attempt }  // Full allocation for speed
        memory = { 64.GB * task.attempt }  // Full memory for single sample
        time   = { 8.h   * task.attempt }
    }

    withName:'KRAKEN2_OPTIMIZED' {
        cpus   = { 8     * task.attempt }  // Full allocation for speed
        memory = { 64.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }

    withName:'KRAKEN2_INCREMENTAL_CLASSIFIER' {
        cpus   = { 8     * task.attempt }  // Full allocation for speed
        memory = { 64.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }

    withName:'FASTP' {
        cpus   = { 4     * task.attempt }  // Higher for speed
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'CHOPPER' {
        cpus   = { 4     * task.attempt }  // Higher for speed
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'FILTLONG' {
        cpus   = { 4     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'NANOPLOT' {
        cpus   = { 2     * task.attempt }  // Standard allocation
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'SEQKIT_STATS' {
        cpus   = { 2     * task.attempt }
        memory = { 4.GB  * task.attempt }
        time   = { 2.h   * task.attempt }
    }

    withName:'DORADO_BASECALLER' {
        cpus   = { 8     * task.attempt }  // Full allocation for speed
        memory = { 16.GB * task.attempt }
        time   = { 12.h  * task.attempt }
    }
}

executor {
    // Lower concurrency for single-sample focus
    queueSize = 8               // Small queue for single sample
    pollInterval = '10 sec'     // Standard polling
    queueStatInterval = '2 min'
}

// MinION strategy explanation
/*
======================================================================================
MINION PARALLELIZATION STRATEGY
======================================================================================

Scenario: Single sample or low multiplexing (1-4 barcodes), MinION/GridION

Pipeline Parallelization Model:
  - Single sample focus: Maximize per-sample completion speed
  - Higher CPU allocation per process
  - Lower total parallelism (1-2 samples at a time)

Example Timeline (8-core system):

  MinION profile (8 CPUs/Kraken2):
    - Can run 1 Kraken2 task at a time
    - Each sample completes in minimum time
    - Total time: 1 sample × 10 batches × 3min = 30 minutes
    - Throughput: Optimized for single sample completion

  PromethION profile (4 CPUs/Kraken2):
    - Can run 2 Kraken2 tasks at a time
    - Each sample takes longer (reduced resources)
    - Total time: 1 sample × 10 batches × 5min = 50 minutes
    - Throughput: Worse for single sample, better for 4+ samples

Key Benefits:
  1. Per-sample speed: Fastest completion for 1-4 samples
  2. Resource maximization: Use all available CPUs for single sample
  3. Real-time responsiveness: Fast turnaround for each batch
  4. Optimal for MinION use case: Single pathogen identification

Automatic Optimizations (Phase 1 & 2):
  ✓ Incremental Kraken2: Avoid re-classification
  ✓ QC stats aggregation: Eliminate redundant computations
  ✓ Conditional NanoPlot: Every 5th batch (more frequent than PromethION)
  ✓ Deferred MultiQC: Run once at end
  ✓ Database preloading: Memory-mapped database caching

Usage:
  nextflow run foi-bioinformatics/nanometanf \\
    -profile minion \\
    --input samplesheet.csv \\
    --realtime_mode \\
    --nanopore_output_dir /sequencing/output \\
    --kraken2_db /databases/kraken2 \\
    --max_cpus 8 \\
    --max_memory 64.GB \\
    --outdir results/

Typical Hardware:
  - MinION Mk1B/Mk1C: 8-16 cores, 16-32 GB RAM
  - GridION: 20 cores, 128 GB RAM

======================================================================================
*/
