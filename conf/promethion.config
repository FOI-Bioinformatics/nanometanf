/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    foi-bioinformatics/nanometanf Nextflow config file for PromethION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Optimized configuration for PromethION sequencing platform

    Key optimizations:
    - Sample-level parallelization across 24 barcodes
    - Reduced per-process CPUs to maximize parallel sample throughput
    - Memory tuning for concurrent sample processing
    - Automatic enablement of real-time optimizations
    - Database memory-mapping for batch efficiency

    Target hardware: PromethION without GPU
    Expected dataset: 3M+ reads, 10-50 GB, 24 barcodes, 30+ batches
----------------------------------------------------------------------------------------
*/

params {
    // Automatically enable PromethION optimizations
    realtime_mode = true

    // Phase 1 optimizations (auto-enabled in real-time mode)
    kraken2_enable_incremental = true
    qc_enable_incremental = true
    nanoplot_realtime_skip_intermediate = true
    nanoplot_batch_interval = 10
    multiqc_realtime_final_only = true

    // Phase 2 optimization (auto-enabled in real-time mode)
    // Database preloading via memory-mapping handled automatically in TAXONOMIC_CLASSIFICATION
}

process {
    // PromethION optimization: Reduce per-process CPUs to allow more parallel samples
    // Trade-off: Lower per-sample speed for higher overall throughput
    //
    // Example: With 24 total CPUs
    //   Default (8 CPUs/process): 3 samples in parallel
    //   PromethION (4 CPUs/process): 6 samples in parallel → 2x sample throughput

    withName:'KRAKEN2_KRAKEN2' {
        cpus   = { 4     * task.attempt }  // Reduced from 8 for parallelism
        memory = { 32.GB * task.attempt }  // Reduced from 64GB for parallelism
        time   = { 8.h   * task.attempt }
    }

    withName:'KRAKEN2_OPTIMIZED' {
        cpus   = { 4     * task.attempt }  // Reduced from 8 for parallelism
        memory = { 32.GB * task.attempt }  // Reduced from 64GB for parallelism
        time   = { 8.h   * task.attempt }
    }

    withName:'KRAKEN2_INCREMENTAL_CLASSIFIER' {
        cpus   = { 4     * task.attempt }  // Reduced from 8 for parallelism
        memory = { 32.GB * task.attempt }  // Reduced from 64GB for parallelism
        time   = { 8.h   * task.attempt }
    }

    withName:'FASTP' {
        cpus   = { 2     * task.attempt }  // Reduced from 4 for parallelism
        memory = { 4.GB  * task.attempt }  // Reduced from 8GB for parallelism
        time   = { 4.h   * task.attempt }
    }

    withName:'CHOPPER' {
        cpus   = { 2     * task.attempt }  // Matched with FASTP
        memory = { 4.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'FILTLONG' {
        cpus   = { 2     * task.attempt }
        memory = { 4.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName:'NANOPLOT' {
        cpus   = { 1     * task.attempt }  // Reduced from 2 for parallelism
        memory = { 6.GB  * task.attempt }  // Reduced from 12GB for parallelism
        time   = { 4.h   * task.attempt }
    }

    withName:'SEQKIT_STATS' {
        cpus   = { 1     * task.attempt }
        memory = { 2.GB  * task.attempt }
        time   = { 2.h   * task.attempt }
    }

    withName:'DORADO_BASECALLER' {
        cpus   = { 4     * task.attempt }  // Matched with Kraken2 for parallelism
        memory = { 16.GB * task.attempt }
        time   = { 12.h  * task.attempt }
    }
}

executor {
    // Allow high concurrency for 24 parallel barcodes
    queueSize = 48              // 24 barcodes × 2 batches in queue
    pollInterval = '5 sec'      // Faster polling for real-time responsiveness
    queueStatInterval = '1 min' // Monitor queue more frequently
}

// PromethION parallelization strategy explanation
/*
======================================================================================
PROMETHION PARALLELIZATION STRATEGY
======================================================================================

Scenario: 24 barcodes, 30 batches, PromethION CPU-only system

Pipeline Parallelization Model:
  - Each [meta, reads] tuple = independent process task
  - 24 barcodes × 30 batches = 720 total tasks
  - Tasks run in parallel groups based on available resources

Example Timeline (4-core system, 4 GB RAM):

  WITHOUT PromethION profile (8 CPUs/task):
    - Can't run ANY Kraken2 tasks (need 8 CPUs, have 4) → Serial fallback
    - Throughput: 1 sample at a time
    - Total time: ~720 × 5min = 60 hours

  WITH PromethION profile (4 CPUs/task):
    - Can run 1 Kraken2 task at a time (4 CPUs, 32 GB)
    - Throughput: 1 sample at a time (but can queue more)
    - Total time: ~720 × 5min = 60 hours
    - BUT: If you have 8 CPUs → 2 samples in parallel → 30 hours
    - AND: If you have 24 CPUs → 6 samples in parallel → 10 hours

  WITH PromethION profile (24-core system):
    - Can run 6 Kraken2 tasks in parallel (24 CPUs / 4 per task)
    - Throughput: 6 samples concurrently → 4x faster than default
    - Total time: ~720 / 6 × 5min = 10 hours vs 60 hours

Key Benefits:
  1. Sample-level parallelism: Process multiple barcodes simultaneously
  2. Resource efficiency: Better utilization of available CPUs
  3. Throughput optimization: Prioritize completing all samples over per-sample speed
  4. Real-time responsiveness: Batches don't queue up behind slow samples

Automatic Optimizations (Phase 1 & 2):
  ✓ Incremental Kraken2: Avoid re-classification
  ✓ QC stats aggregation: Eliminate redundant computations
  ✓ Conditional NanoPlot: Skip intermediate batches
  ✓ Deferred MultiQC: Run once at end
  ✓ Database preloading: Memory-mapped database caching

Usage:
  nextflow run foi-bioinformatics/nanometanf \\
    -profile promethion \\
    --input samplesheet.csv \\
    --realtime_mode \\
    --nanopore_output_dir /sequencing/output \\
    --kraken2_db /databases/kraken2 \\
    --max_cpus 24 \\
    --max_memory 128.GB \\
    --outdir results/

======================================================================================
*/
