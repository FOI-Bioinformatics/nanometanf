/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    foi-bioinformatics/nanometanf Cloud Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Cloud-optimized settings for AWS, Azure, and Google Cloud Platform deployments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

params {
    config_profile_name        = 'Cloud Computing'
    config_profile_description = 'Cloud-optimized configuration for nanometanf on AWS/Azure/GCP'
    config_profile_contact     = 'andreas.sjodin@foi.se'
    config_profile_url         = 'https://github.com/foi-bioinformatics/nanometanf'

    // Cloud-specific optimizations
    max_cpus                   = 96
    max_memory                 = '768.GB'
    max_time                   = '48.h'
    
    // Cost optimization settings
    optimization_profile       = 'balanced'
    enable_dynamic_resources   = true
    resource_safety_factor     = 0.8
    enable_spot_instances      = true
    
    // Cloud storage optimizations
    enable_s3_acceleration     = true
    compress_intermediate_files = true
    stream_processing          = true
    
    // Enhanced monitoring for cost control
    enable_cost_monitoring     = true
    enable_performance_logging = true
    cost_alert_threshold       = 100.0  // USD
}

process {
    // Default cloud settings with cost optimization
    errorStrategy = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'terminate' }
    maxRetries    = 2
    
    // Base resource allocation optimized for cloud instance types
    cpus   = 2
    memory = '8.GB'
    time   = '4.h'
    
    // Cloud instance type mappings
    withLabel:process_single {
        cpus   = 2
        memory = '8.GB'
        time   = '2.h'
        // AWS: t3.large, Azure: Standard_D2s_v3, GCP: n1-standard-2
    }
    
    withLabel:process_low {
        cpus   = 4
        memory = '16.GB'
        time   = '6.h'
        // AWS: c5.xlarge, Azure: Standard_F4s_v2, GCP: c2-standard-4
    }
    
    withLabel:process_medium {
        cpus   = 8
        memory = '32.GB'
        time   = '12.h'
        // AWS: c5.2xlarge, Azure: Standard_F8s_v2, GCP: c2-standard-8
    }
    
    withLabel:process_high {
        cpus   = 16
        memory = '64.GB'
        time   = '24.h'
        // AWS: c5.4xlarge, Azure: Standard_F16s_v2, GCP: c2-standard-16
    }
    
    withLabel:process_high_memory {
        memory = '128.GB'
        // AWS: r5.4xlarge, Azure: Standard_E16s_v3, GCP: n1-highmem-16
    }
    
    withLabel:process_gpu {
        accelerator = 1
        // AWS: p3.2xlarge, Azure: NC6s_v3, GCP: n1-standard-4 + T4
    }
    
    // nanometanf-specific cloud configurations
    withName:'DORADO_BASECALLER' {
        cpus        = 8
        memory      = '64.GB'
        time        = '24.h'
        accelerator = 1
        
        // Use GPU instances for basecalling
        ext.cloud_instance = 'gpu-optimized'
        
        ext.args = [
            '--device auto',
            '--emit_fastq',
            '--chunk_size 4000',
            '--batch_size 0'  // Auto-optimize for cloud
        ].join(' ')
    }
    
    withName:'KRAKEN2_KRAKEN2' {
        cpus   = 16
        memory = '128.GB'
        time   = '12.h'
        
        // Use memory-optimized instances
        ext.cloud_instance = 'memory-optimized'
        
        ext.args = [
            '--threads ${task.cpus}',
            '--memory-mapping',
            '--confidence 0.1'
        ].join(' ')
    }
    
    withName:'FASTP' {
        cpus   = 8
        memory = '32.GB'
        time   = '8.h'
        
        // Use compute-optimized instances
        ext.cloud_instance = 'compute-optimized'
        
        ext.args = [
            '--thread ${task.cpus}',
            '--compression 6',  // Optimize for cloud storage
            '--verbose'
        ].join(' ')
    }
    
    withName:'BLAST_BLASTN' {
        cpus   = 16
        memory = '64.GB'
        time   = '16.h'
        
        ext.cloud_instance = 'compute-optimized'
        
        ext.args = [
            '-num_threads ${task.cpus}',
            '-max_target_seqs 50',  // Reduced for cost optimization
            '-evalue 1e-3'
        ].join(' ')
    }
    
    withName:'NANOPLOT' {
        cpus   = 4
        memory = '16.GB'
        time   = '4.h'
        
        ext.cloud_instance = 'general-purpose'
    }
    
    withName:'MULTIQC' {
        cpus   = 2
        memory = '8.GB'
        time   = '2.h'
        
        ext.cloud_instance = 'general-purpose'
    }
}

// AWS-specific settings
aws {
    region = 'us-east-1'
    batch {
        volumes = '/tmp'
        cliPath = '/usr/local/aws-cli/v2/current/bin/aws'
        maxParallelTransfers = 16
        maxTransferAttempts = 3
        delayBetweenAttempts = '5 sec'
    }
    
    // S3 optimization
    client {
        maxConnections = 20
        connectionTimeout = '10000'
        uploadStorageClass = 'INTELLIGENT_TIERING'
        storageEncryption = 'AES256'
    }
}

// Azure-specific settings
azure {
    batch {
        location = 'East US'
        autoScale = true
        maxVmCount = 100
        vmType = 'Standard_F4s_v2'
    }
    
    storage {
        accountName = "${AZURE_STORAGE_ACCOUNT}"
        accountKey = "${AZURE_STORAGE_KEY}"
        tokenDuration = '48h'
    }
}

// Google Cloud-specific settings
google {
    project = "${GOOGLE_PROJECT_ID}"
    zone = 'us-central1-b'
    
    batch {
        maxParallelTransfers = 16
        delayBetweenAttempts = '5 sec'
    }
    
    storage {
        delayBetweenAttempts = '5 sec'
    }
}

// Container optimization for cloud
docker {
    enabled = true
    fixOwnership = true
    runOptions = '-u $(id -u):$(id -g)'
    
    // Use registry caching for faster startup
    registry = 'your-registry.amazonaws.com'
    pullTimeout = '20 min'
}

singularity {
    enabled = false  // Prefer Docker in cloud environments
}

// Cloud storage optimization
workDir = 's3://your-nanometanf-work-bucket/work'

// Enhanced monitoring for cloud cost control
trace {
    enabled = true
    file    = 's3://your-nanometanf-results-bucket/pipeline_info/cloud_trace_${params.trace_report_suffix}.txt'
    fields  = 'task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,attempt,cpus,memory,disk,time,env,cost'
}

timeline {
    enabled = true
    file    = 's3://your-nanometanf-results-bucket/pipeline_info/cloud_timeline_${params.trace_report_suffix}.html'
}

report {
    enabled = true
    file    = 's3://your-nanometanf-results-bucket/pipeline_info/cloud_report_${params.trace_report_suffix}.html'
}

// Cloud-specific cleanup and cost optimization
cleanup = true

// Notification for cost alerts
notification {
    enabled = true
    to = "${params.email}"
    from = 'nanometanf-cloud@your-domain.com'
    subject = 'nanometanf Cloud Run Notification'
}