/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    foi-bioinformatics/nanometanf Production Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Production-optimized settings for stable, high-throughput environments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

params {
    // Production deployment settings
    config_profile_name        = 'Production'
    config_profile_description = 'Production-optimized configuration for stable nanometanf deployments'
    config_profile_contact     = 'andreas.sjodin@foi.se'
    config_profile_url         = 'https://github.com/foi-bioinformatics/nanometanf'

    // Enhanced error handling and monitoring
    enable_error_recovery      = true
    max_retry_attempts         = 3
    retry_exponential_backoff  = true
    enable_performance_logging = true
    enable_resource_monitoring = true
    
    // Production resource allocation
    max_cpus                   = 32
    max_memory                 = '256.GB'
    max_time                   = '48.h'
    
    // Optimized for production throughput
    optimization_profile       = 'high_throughput'
    enable_dynamic_resources   = true
    resource_safety_factor     = 0.9
    
    // Enhanced validation and quality control
    strict_validation          = true
    enable_qc_benchmark        = true
    quality_thresholds_strict  = true
    
    // Production monitoring and alerting
    enable_realtime_stats      = true
    realtime_stats_interval    = "30s"
    performance_alert_threshold = 0.8
    quality_alert_threshold    = 0.9
    
    // Data integrity and backup
    enable_checksum_validation = true
    create_backup_copies       = true
    compress_intermediate_files = true
}

process {
    // Production error handling strategy
    errorStrategy = { task.exitStatus in [130,143,137,104,134,139,175] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = 5
    
    // Enhanced resource allocation with safety margins
    cpus   = { Math.min( 4 * task.attempt, 32 ) }
    memory = { Math.min( 16.GB * task.attempt, 256.GB ) }
    time   = { Math.min( 8.h * task.attempt, 48.h ) }
    
    // Production-specific process configurations
    withName:'DORADO_BASECALLER' {
        cpus          = { Math.min( 16 * task.attempt, 32 ) }
        memory        = { Math.min( 64.GB * task.attempt, 128.GB ) }
        time          = { Math.min( 24.h * task.attempt, 48.h ) }
        errorStrategy = 'retry'
        maxRetries    = 2
        accelerator   = { workflow.profile.contains('gpu') ? 2 : null }
        
        ext.args = [
            '--emit_fastq',
            '--emit_sam',
            '--verbose_logs',
            '--device auto'
        ].join(' ')
    }
    
    withName:'KRAKEN2_KRAKEN2' {
        cpus          = { Math.min( 16 * task.attempt, 24 ) }
        memory        = { Math.min( 128.GB * task.attempt, 200.GB ) }
        time          = { Math.min( 12.h * task.attempt, 24.h ) }
        errorStrategy = 'retry'
        maxRetries    = 2
        
        ext.args = [
            '--report-zero-counts',
            '--confidence 0.1',
            '--minimum-base-quality 20'
        ].join(' ')
    }
    
    withName:'FASTP' {
        cpus          = { Math.min( 8 * task.attempt, 16 ) }
        memory        = { Math.min( 16.GB * task.attempt, 32.GB ) }
        time          = { Math.min( 6.h * task.attempt, 12.h ) }
        
        ext.args = [
            '--disable_adapter_trimming',
            '--disable_quality_filtering false',
            '--qualified_quality_phred 15',
            '--length_required 1000',
            '--verbose',
            '--thread ${task.cpus}'
        ].join(' ')
    }
    
    withName:'BLAST_BLASTN' {
        cpus          = { Math.min( 8 * task.attempt, 16 ) }
        memory        = { Math.min( 24.GB * task.attempt, 48.GB ) }
        time          = { Math.min( 8.h * task.attempt, 16.h ) }
        
        ext.args = [
            '-max_target_seqs 10',
            '-evalue 1e-5',
            '-word_size 11',
            '-num_threads ${task.cpus}'
        ].join(' ')
    }
    
    withName:'NANOPLOT' {
        cpus   = { Math.min( 4 * task.attempt, 8 ) }
        memory = { Math.min( 16.GB * task.attempt, 32.GB ) }
        time   = { Math.min( 4.h * task.attempt, 8.h ) }
        
        ext.args = [
            '--verbose',
            '--threads ${task.cpus}',
            '--N50'
        ].join(' ')
    }
    
    withName:'MULTIQC' {
        cpus   = { Math.min( 2 * task.attempt, 4 ) }
        memory = { Math.min( 8.GB * task.attempt, 16.GB ) }
        time   = { Math.min( 2.h * task.attempt, 4.h ) }
        
        ext.args = [
            '--force',
            '--verbose',
            '--dirs',
            '--export'
        ].join(' ')
    }
    
    // Enhanced error handling processes
    withName:'ERROR_HANDLER' {
        cpus          = 1
        memory        = '4.GB'
        time          = '1.h'
        errorStrategy = 'ignore'
        
        ext.args = [
            '--analysis_level comprehensive',
            '--generate_recovery_plan'
        ].join(' ')
    }
}

// Production-specific executor settings
executor {
    name           = 'local'
    cpus           = 32
    memory         = '256.GB'
    queueSize      = 50
    submitRateLimit = '10 sec'
    pollInterval   = '5 sec'
}

// Enhanced monitoring and reporting
trace {
    enabled    = true
    file       = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
    fields     = 'task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,env,workdir,script,scratch,error_action'
}

timeline {
    enabled    = true
    file       = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
    overwrite  = true
}

report {
    enabled    = true
    file       = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
    overwrite  = true
}

dag {
    enabled    = true
    file       = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
    overwrite  = true
}

// Production notification settings
notification {
    enabled = true
    to      = "${params.email}"
    from    = 'nanometanf-production@foi.se'
}

// Production cleanup and optimization
cleanup = true

workDir = "${params.outdir}/work"

// Production cache settings
conda.cacheDir = "${HOME}/.conda/envs"
singularity.cacheDir = "${HOME}/.singularity/cache"

// Security and validation
docker.enabled = false
singularity.enabled = true
singularity.autoMounts = true