nextflow_pipeline {

    name "Test Dorado multiplex POD5 basecalling and demultiplexing"  
    script "../main.nf"

    test("Should basecall POD5 and demultiplex with Dorado") {

        when {
            params {
                // Empty samplesheet for POD5 mode
                input = "$projectDir/tests/empty_samplesheet.csv"
                outdir = "$outputDir"
                
                // Enable Dorado with multiplex settings
                use_dorado = true
                dorado_path = '/Users/andreassjodin/Downloads/dorado-1.1.1-osx-arm64/bin/dorado'
                pod5_input_dir = "$projectDir/assets/test_data/minimal_nanoseq/pod5"
                dorado_model = 'dna_r10.4.1_e4.3_400bps_fast'
                
                // Multiplex demultiplexing
                barcode_kit = 'SQK-NBD114-24'
                trim_barcodes = true
                min_qscore = 7
                
                // Disable other modes
                realtime_mode = false
                barcode_input_dir = null
                
                // Disable advanced features for focused testing
                kraken2_db = null
                blast_validation = false
                
                // Resource limits
                max_cpus = 2
                max_memory = '4.GB'  
                max_time = '2.h'  // Longer for demux
            }
        }

        then {
            assert workflow.success
            assert snapshot(file("${outputDir}/pipeline_info/software_versions.yml")).match("software_versions")  // May fail without actual POD5 files
            
            if (workflow.success) {
                // Check that Dorado basecalling ran
                assert workflow.trace.tasks().any { it.name.contains('DORADO_BASECALLING') }
                
                // Check that demultiplexing ran  
                assert workflow.trace.tasks().any { it.name.contains('DORADO_DEMUX') }
                
                // Check multiple barcode samples were processed
                def fastp_tasks = workflow.trace.tasks().findAll { it.name.contains('CHOPPER') || it.name.contains('FASTP') || it.name.contains('FILTLONG') }
                // Should have multiple samples from demux (or fail gracefully)
                
                // Check output structure
                assert path("${outputDir}/fastp").exists()
                assert path("${outputDir}/multiqc").exists()
            }
        }
    }

    test("Should handle POD5 without demux (singleplex)") {

        when {
            params {
                input = "$projectDir/tests/empty_samplesheet.csv"  
                outdir = "$outputDir"
                
                // Enable Dorado without demux
                use_dorado = true
                dorado_path = '/Users/andreassjodin/Downloads/dorado-1.1.1-osx-arm64/bin/dorado'
                pod5_input_dir = "$projectDir/assets/test_data/minimal_nanoseq/pod5"
                dorado_model = 'dna_r10.4.1_e4.3_400bps_fast'
                
                // No barcode kit = no demux
                barcode_kit = null
                min_qscore = 7
                
                // Disable other modes
                realtime_mode = false
                barcode_input_dir = null
                kraken2_db = null
                blast_validation = false
                
                // Resource limits
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '1.h'
            }
        }

        then {
            assert workflow.success
            assert snapshot(file("${outputDir}/pipeline_info/software_versions.yml")).match("software_versions")
            
            if (workflow.success) {
                // Should have basecalling but no demux
                assert workflow.trace.tasks().any { it.name.contains('DORADO_BASECALLING') }
                assert !workflow.trace.tasks().any { it.name.contains('DORADO_DEMUX') }
                
                // Should process single sample
                def fastp_tasks = workflow.trace.tasks().findAll { it.name.contains('CHOPPER') || it.name.contains('FASTP') || it.name.contains('FILTLONG') }
                assert fastp_tasks.size() == 1
            }
        }
    }
}