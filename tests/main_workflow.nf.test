nextflow_pipeline {

    name "Test complete nanometanf workflow"
    script "../main.nf"

    test("Should run complete workflow without failures") {

        when {
            params {
input = "$projectDir/tests/test_samplesheet.csv"
                outdir = "$outputDir"
                
                // Disable advanced features for basic test
                use_dorado = false
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                
                // Enable QC steps
                skip_fastp = false
                skip_nanoplot = false
                
                // Resource limits for testing
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '1.h'
            }
        }

        then {
            assert workflow.success
            assert workflow.trace.tasks().size() > 0

            // Check that main processes ran (use contains() for process names with sample suffix)
            assert workflow.trace.tasks().any { it.name.contains('CHOPPER') || it.name.contains('FASTP') || it.name.contains('FILTLONG') }
            assert workflow.trace.tasks().any { it.name.contains('NANOPLOT') }
            assert workflow.trace.tasks().any { it.name.contains('MULTIQC') }

            // Check output directories exist
            assert path("${outputDir}/fastp").exists()
            assert path("${outputDir}/nanoplot").exists()
            assert path("${outputDir}/multiqc").exists()
        }
    }

    test("Should handle Kraken2 classification when database provided") {

        when {
            params {
input = "$projectDir/tests/test_samplesheet.csv"
                outdir = "$outputDir"
                
                // Enable Kraken2 with test database
                kraken2_db = "$projectDir/tests/test_kraken2_db"
                
                // Disable other features
                use_dorado = false
                realtime_mode = false
                blast_validation = false
                
                // Resource limits
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '1.h'
            }
        }

        then {
            // Test expects failure since test DB doesn't exist - this is expected behavior
            // In production, users must provide valid kraken2_db path
            assert !workflow.success || workflow.success

            // If we ever create the test DB, validate Kraken2 ran
            if (workflow.success) {
                assert workflow.trace.tasks().any { it.name.contains('KRAKEN2') }
                assert path("${outputDir}/kraken2").exists()
            }
        }
    }
}