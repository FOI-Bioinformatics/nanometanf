nextflow_pipeline {

    name "Edge Case Testing: Malformed Inputs and Error Conditions"
    script "../../main.nf"

    test("Should handle corrupted FASTQ files gracefully") {

        setup {
            """
            # Create corrupted FASTQ file
            echo "This is not a valid FASTQ file" > $outputDir/corrupted.fastq.gz
            
            # Create truncated FASTQ file
            echo -e "@read1\nATCG" > $outputDir/truncated.fastq
            gzip $outputDir/truncated.fastq
            
            # Create samplesheet with corrupted files
            cat > $outputDir/corrupted_samplesheet.csv << 'EOF'
sample,fastq,barcode
CORRUPTED_SAMPLE,$outputDir/corrupted.fastq.gz,
TRUNCATED_SAMPLE,$outputDir/truncated.fastq.gz,BC01
EOF
            """
        }

        when {
            params {
                input = "$outputDir/corrupted_samplesheet.csv"
                outdir = "$outputDir"
                
                // Enable error handling
                enable_error_recovery = true
                strict_validation = false
                max_retry_attempts = 1
                
                // Minimal resources for quick failure
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '2.min'
                
                // Disable heavy processing
                use_dorado = false
                kraken2_db = null
                blast_validation = false
                skip_nanoplot = true
            }
        }

        then {
            // Should either succeed with error handling or fail gracefully
            assert workflow.success
            
            if (workflow.failed) {
                // Should fail quickly, not hang
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 180000 // Less than 3 minutes
            }
            
            if (workflow.success) {
                // Error handling should have been invoked
                assert workflow.trace.tasks().any { 
                    it.name.contains('ERROR') || 
                    it.name.contains('VALIDATOR') ||
                    it.exitStatus != 0
                }
            }
        }
    }

    test("Should handle missing input files") {

        setup {
            """
            # Create samplesheet with non-existent files
            cat > $outputDir/missing_files_samplesheet.csv << 'EOF'
sample,fastq,barcode
MISSING_SAMPLE1,/path/that/does/not/exist/sample1.fastq.gz,
MISSING_SAMPLE2,/another/missing/path/sample2.fastq.gz,BC01
MISSING_SAMPLE3,$outputDir/this_file_does_not_exist.fastq.gz,BC02
EOF
            """
        }

        when {
            params {
                input = "$outputDir/missing_files_samplesheet.csv"
                outdir = "$outputDir"
                
                // Error handling configuration
                enable_error_recovery = true
                handle_missing_files = true
                strict_validation = false
                
                // Quick failure settings
                max_cpus = 1
                max_memory = '1.GB'
                max_time = '1.min'
                
                // Disable processing
                use_dorado = false
                kraken2_db = null
                blast_validation = false
            }
        }

        then {
            // Should fail due to missing files
            assert workflow.failed || workflow.success
            
            if (workflow.failed) {
                // Should detect missing files early
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 120000 // Less than 2 minutes
                
                // Should have validation or error handling tasks
                def validation_tasks = workflow.trace.tasks().findAll { 
                    it.name.contains('VALIDATOR') || it.name.contains('CHECK')
                }
                assert validation_tasks.size() >= 0
            }
        }
    }

    test("Should handle malformed samplesheet") {

        setup {
            """
            # Create malformed samplesheets
            cat > $outputDir/malformed1.csv << 'EOF'
sample,fastq
MISSING_BARCODE_COLUMN,sample1.fastq.gz
EOF

            cat > $outputDir/malformed2.csv << 'EOF'
sample,fastq,barcode,extra_column
EXTRA_COLUMN,sample1.fastq.gz,BC01,unexpected
EOF

            cat > $outputDir/malformed3.csv << 'EOF'
# This is not a valid CSV header
sample fastq barcode
SPACES_NOT_COMMAS sample.fastq.gz BC01
EOF

            # Empty samplesheet
            touch $outputDir/empty.csv
            """
        }

        when {
            params {
                input = "$outputDir/malformed1.csv"
                outdir = "$outputDir"
                
                // Schema validation
                validate_params = true
                strict_validation = true
                
                // Quick settings
                max_cpus = 1
                max_memory = '1.GB'
                max_time = '30.s'
                
                // Disable processing
                use_dorado = false
                kraken2_db = null
                blast_validation = false
            }
        }

        then {
            // Should fail due to schema validation
            assert workflow.failed
            
            // Should fail quickly during validation
            // REMOVED: workflow.duration property not available in nf-test
            // assert workflow.duration.toMillis() < 60000 // Less than 1 minute
        }
    }

    test("Should handle resource exhaustion scenarios") {

        setup {
            """
            # Create large mock files (simulate resource pressure)
            cp $projectDir/tests/test_sample.fastq.gz $outputDir/resource_test1.fastq.gz
            cp $projectDir/tests/test_sample.fastq.gz $outputDir/resource_test2.fastq.gz
            
            cat > $outputDir/resource_exhaustion_samplesheet.csv << 'EOF'
sample,fastq,barcode
RESOURCE_TEST1,$outputDir/resource_test1.fastq.gz,
RESOURCE_TEST2,$outputDir/resource_test2.fastq.gz,BC01
EOF
            """
        }

        when {
            params {
                input = "$outputDir/resource_exhaustion_samplesheet.csv"
                outdir = "$outputDir"
                
                // Extremely limited resources to force failure
                max_cpus = 1
                max_memory = '500.MB'  // Very low memory
                max_time = '30.s'      // Very short time
                
                // Enable resource monitoring
                enable_resource_monitoring = true
                enable_error_recovery = true
                
                // Disable heavy processing but keep basic QC
                use_dorado = false
                kraken2_db = null
                blast_validation = false
                skip_nanoplot = true
            }
        }

        then {
            // Should likely fail due to resource constraints
            assert workflow.failed || workflow.success
            
            if (workflow.failed) {
                // Should fail within the time limit
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 60000 // Less than 1 minute
                
                // Check if any tasks were memory or time limited
                def failed_tasks = workflow.trace.tasks().findAll { it.exitStatus != 0 }
                if (failed_tasks.size() > 0) {
                    println("Failed tasks detected: ${failed_tasks.size()}")
                }
            }
        }
    }

    test("Should handle invalid parameter combinations") {

        setup {
            """
            cp $projectDir/tests/test_sample.fastq.gz $outputDir/invalid_params_sample.fastq.gz
            
            cat > $outputDir/invalid_params_samplesheet.csv << 'EOF'
sample,fastq,barcode
INVALID_PARAMS_TEST,$outputDir/invalid_params_sample.fastq.gz,
EOF
            """
        }

        when {
            params {
                input = "$outputDir/invalid_params_samplesheet.csv"
                outdir = "$outputDir"
                
                // Conflicting parameters
                use_dorado = true
                pod5_input_dir = null  // Required when use_dorado is true
                realtime_mode = true
                nanopore_output_dir = null  // Required when realtime_mode is true
                
                // More invalid combinations
                enable_dynamic_resources = true
                optimization_profile = "invalid_profile"
                
                // Resource settings
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '1.min'
            }
        }

        then {
            // Should fail due to parameter validation
            assert workflow.failed
            
            // Should fail early during parameter validation
            // REMOVED: workflow.duration property not available in nf-test
            // assert workflow.duration.toMillis() < 30000 // Less than 30 seconds
        }
    }

    test("Should handle disk space and I/O errors") {

        setup {
            """
            cp $projectDir/tests/test_sample.fastq.gz $outputDir/io_test_sample.fastq.gz
            
            cat > $outputDir/io_test_samplesheet.csv << 'EOF'
sample,fastq,barcode
IO_TEST_SAMPLE,$outputDir/io_test_sample.fastq.gz,
EOF

            # Try to create a read-only output directory to simulate permission issues
            mkdir -p $outputDir/readonly_output
            chmod 444 $outputDir/readonly_output || true
            """
        }

        when {
            params {
                input = "$outputDir/io_test_samplesheet.csv"
                outdir = "$outputDir/readonly_output"  // Read-only directory
                
                // Error handling
                enable_error_recovery = true
                max_retry_attempts = 1
                
                // Resource settings
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '2.min'
                
                // Minimal processing
                use_dorado = false
                kraken2_db = null
                blast_validation = false
                skip_nanoplot = true
            }
        }

        then {
            // Should likely fail due to I/O errors
            assert workflow.failed || workflow.success
            
            if (workflow.failed) {
                // Should detect I/O issues relatively quickly
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 180000 // Less than 3 minutes
            }
            
            // Clean up permissions
            """
            chmod 755 $outputDir/readonly_output 2>/dev/null || true
            """
        }
    }

    test("Should handle network timeouts and connectivity issues") {

        setup {
            """
            cp $projectDir/tests/test_sample.fastq.gz $outputDir/network_test_sample.fastq.gz
            
            cat > $outputDir/network_test_samplesheet.csv << 'EOF'
sample,fastq,barcode
NETWORK_TEST_SAMPLE,$outputDir/network_test_sample.fastq.gz,
EOF
            """
        }

        when {
            params {
                input = "$outputDir/network_test_samplesheet.csv"
                outdir = "$outputDir"
                
                // Enable features that might require network access
                kraken2_db = "https://invalid.url/nonexistent_database.tar.gz"
                blast_validation = false  // Disable BLAST to avoid network issues
                
                // Timeout settings
                download_timeout = "10s"
                max_retry_attempts = 1
                
                // Resource settings
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '1.min'
                
                // Disable other features
                use_dorado = false
                realtime_mode = false
            }
        }

        then {
            // Should fail due to network/database issues
            assert workflow.failed || workflow.success
            
            if (workflow.failed) {
                // Should timeout relatively quickly
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 120000 // Less than 2 minutes
            }
        }
    }

    test("Should handle concurrent access and file locking issues") {

        setup {
            """
            # Create shared test file
            cp $projectDir/tests/test_sample.fastq.gz $outputDir/shared_sample.fastq.gz
            
            # Create multiple samplesheets pointing to same file
            cat > $outputDir/concurrent1_samplesheet.csv << 'EOF'
sample,fastq,barcode
CONCURRENT_TEST1,$outputDir/shared_sample.fastq.gz,BC01
EOF

            cat > $outputDir/concurrent2_samplesheet.csv << 'EOF'
sample,fastq,barcode
CONCURRENT_TEST2,$outputDir/shared_sample.fastq.gz,BC02
EOF
            """
        }

        when {
            params {
                input = "$outputDir/concurrent1_samplesheet.csv"
                outdir = "$outputDir"
                
                // Settings that might cause file contention
                publish_dir_mode = 'copy'
                cache_dir = "$outputDir/shared_cache"
                
                // Error handling
                enable_error_recovery = true
                handle_file_conflicts = true
                
                // Resource settings
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '2.min'
                
                // Minimal processing
                use_dorado = false
                kraken2_db = null
                blast_validation = false
                skip_nanoplot = true
            }
        }

        then {
            // Should handle file access gracefully
            assert workflow.success
            
            if (workflow.success) {
                // Should complete processing
                assert path("$outputDir/results").exists()
            }
            
            if (workflow.failed) {
                // Should fail within reasonable time
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 180000 // Less than 3 minutes
            }
        }
    }

    test("Should handle extremely large or extremely small files") {

        setup {
            """
            # Create extremely small file
            echo -e "@tiny\nA\n+\n!" > $outputDir/tiny.fastq
            gzip $outputDir/tiny.fastq
            
            # Create empty file
            touch $outputDir/empty.fastq.gz
            
            # Create samplesheet
            cat > $outputDir/size_edge_cases_samplesheet.csv << 'EOF'
sample,fastq,barcode
TINY_SAMPLE,$outputDir/tiny.fastq.gz,
EMPTY_SAMPLE,$outputDir/empty.fastq.gz,BC01
EOF
            """
        }

        when {
            params {
                input = "$outputDir/size_edge_cases_samplesheet.csv"
                outdir = "$outputDir"
                
                // Error handling for edge cases
                enable_error_recovery = true
                handle_empty_files = true
                min_file_size_bytes = 1
                
                // Resource settings
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '2.min'
                
                // Processing settings
                use_dorado = false
                kraken2_db = null
                blast_validation = false
                skip_nanoplot = true
                fastp_dont_eval_duplication = true
            }
        }

        then {
            // Should handle size edge cases
            assert workflow.success
            
            if (workflow.success) {
                // Should complete with some outputs
                assert path("$outputDir/results").exists()
            }
            
            if (workflow.failed) {
                // Should fail gracefully
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 180000 // Less than 3 minutes
            }
        }
    }
}