nextflow_pipeline {

    name "Advanced Error Handling and Edge Case Coverage Testing"
    script "../main.nf"

    test("Should validate advanced parameter combinations and detect edge cases") {

        when {
            params {
                input = "$projectDir/assets/test_data/test_samplesheet_absolute.csv"
                outdir = "$outputDir"
                
                // Test conflicting parameters to trigger advanced validation
                use_dorado = true
                pod5_input_dir = null
                barcode_input_dir = "$outputDir/nonexistent_barcode_dir"
                realtime_mode = false
                
                // Resource edge cases
                max_cpus = 1
                max_memory = '512.MB'  // Very low memory to trigger warnings
                max_time = '1.min'
                
                // Enable advanced error handling
                enable_dynamic_resources = true
                optimization_profile = 'resource_conservative'
                
                // Disable heavy processing to focus on error handling
                skip_fastp = true
                skip_nanoplot = true
                skip_multiqc = true
                kraken2_db = null
                blast_validation = false
            }
        }

        then {
            // Should complete but with warnings about resource constraints
            assert workflow.success
            
            if (workflow.success) {
                // Validate that error handling mechanisms were triggered
                assert path("$outputDir").exists()
            } else {
                // Failure is acceptable for edge case testing
                assert workflow.errorMessage || workflow.exitStatus != 0
            }
        }
    }

    test("Should handle missing input files gracefully with error recovery") {

        when {
            params {
                input = "$outputDir/nonexistent_samplesheet.csv"
                outdir = "$outputDir/error_recovery_test"
                
                // Minimal resources to potentially trigger resource-related errors
                max_cpus = 1
                max_memory = '1.GB'
                max_time = '30.s'
                
                // Skip all heavy processing
                use_dorado = false
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                skip_fastp = true
                skip_nanoplot = true
                skip_multiqc = true
                enable_dynamic_resources = false
            }
        }

        then {
            // Should fail gracefully without hanging
            assert workflow.failed || workflow.success
            
            // Should fail within reasonable time
            // REMOVED: workflow.duration property not available in nf-test
            // assert workflow.duration.toMillis() < 60000 // Less than 60 seconds
        }
    }

    test("Should detect and handle resource constraint scenarios") {

        when {
            params {
                input = "$projectDir/assets/test_data/test_samplesheet_absolute.csv"
                outdir = "$outputDir/resource_test"
                
                // Extreme resource constraints to test edge handling
                max_cpus = 1
                max_memory = '100.MB'  // Extremely low memory
                max_time = '10.s'      // Very short time limit
                
                // Enable features that would stress resources
                enable_dynamic_resources = true
                optimization_profile = 'high_throughput'  // Conflicting with low resources
                
                // Disable heavy processing to isolate resource handling
                use_dorado = false
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                skip_fastp = true
                skip_nanoplot = true
                skip_multiqc = true
            }
        }

        then {
            // Should handle resource constraints without crashing
            assert workflow.success
            
            if (workflow.failed) {
                // Should fail quickly due to resource constraints
                // REMOVED: workflow.duration property not available in nf-test
                // assert workflow.duration.toMillis() < 30000 // Less than 30 seconds
            }
        }
    }

    test("Should handle invalid parameter combinations with clear error messages") {

        when {
            params {
                input = "$projectDir/assets/test_data/test_samplesheet_absolute.csv"
                outdir = "$outputDir/invalid_params_test"
                
                // Invalid parameter combinations
                use_dorado = true
                pod5_input_dir = null  // Missing required POD5 directory
                dorado_model = "nonexistent_model"
                barcode_kit = "invalid_kit"
                
                // Real-time mode without required parameters
                realtime_mode = true
                nanopore_output_dir = null  // Missing required directory
                
                // Conflicting optimization settings
                optimization_profile = "nonexistent_profile"
                enable_dynamic_resources = false  // Disabled but profile specified
                
                // Quick failure test
                max_cpus = 1
                max_memory = '1.GB'
                max_time = '30.s'
            }
        }

        then {
            // Should fail with clear error message
            assert workflow.failed
            
            // Should have specific error information
            assert workflow.errorMessage || workflow.exitStatus != 0
            
            // Should fail quickly without hanging
            // REMOVED: workflow.duration property not available in nf-test
            // assert workflow.duration.toMillis() < 45000 // Less than 45 seconds
        }
    }

    test("Should provide detailed error analysis and recovery suggestions") {

        when {
            params {
                input = "$projectDir/assets/test_data/test_samplesheet_absolute.csv"
                outdir = "$outputDir/error_analysis_test"
                
                // Configuration that may cause issues but should be handled
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '1.min'
                
                // Enable error handling features
                enable_dynamic_resources = true
                optimization_profile = 'auto'
                
                // Mix of valid and edge case parameters
                use_dorado = false
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                
                // Skip processing to focus on parameter validation
                skip_fastp = true
                skip_nanoplot = true
                skip_multiqc = true
            }
        }

        then {
            // Should succeed with proper error handling
            assert workflow.success
            
            // Should complete within reasonable time
            // REMOVED: workflow.duration property not available in nf-test
            // assert workflow.duration.toMillis() < 30000 // Less than 30 seconds
            
            // Output directory should exist
            assert path("$outputDir/error_analysis_test").exists()
        }
    }

    test("Should handle concurrent access and file locking scenarios") {

        when {
            params {
                input = "$projectDir/assets/test_data/test_samplesheet_absolute.csv"
                outdir = "$outputDir/concurrent_test"
                
                // Configuration that might cause file conflicts
                max_cpus = 2  // Multiple processes
                max_memory = '4.GB'
                max_time = '2.min'
                
                // Enable concurrent processing features
                enable_dynamic_resources = true
                optimization_profile = 'balanced'
                
                // Quick processing
                use_dorado = false
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                skip_fastp = true
                skip_nanoplot = true
                skip_multiqc = true
            }
        }

        then {
            // Should handle concurrent access gracefully
            assert workflow.success
            
            if (workflow.success) {
                // Should complete successfully
                assert path("$outputDir/concurrent_test").exists()
            }
            
            // Should not hang indefinitely
            // REMOVED: workflow.duration property not available in nf-test
            // assert workflow.duration.toMillis() < 120000 // Less than 2 minutes
        }
    }

    test("Should provide comprehensive edge case documentation and reporting") {

        when {
            params {
                input = "$projectDir/assets/test_data/test_samplesheet_absolute.csv"
                outdir = "$outputDir/edge_case_documentation"
                
                // Edge case parameter combination
                max_cpus = 8
                max_memory = '1.GB'  // High CPU, low memory ratio
                max_time = '5.min'
                
                // Multiple optimization features
                enable_dynamic_resources = true
                optimization_profile = 'gpu_optimized'  // GPU profile without GPU
                resource_safety_factor = 0.1  // Very aggressive resource allocation
                enable_performance_logging = true
                
                // Quick test execution
                use_dorado = false
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                skip_fastp = true
                skip_nanoplot = true
                skip_multiqc = true
            }
        }

        then {
            // Should complete with edge case handling
            assert workflow.success
            
            // Should generate appropriate warnings/recommendations
            // (This would be verified by checking log output in real implementation)
            
            if (workflow.success) {
                assert path("$outputDir/edge_case_documentation").exists()
            }
        }
    }
}