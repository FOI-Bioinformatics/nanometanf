nextflow_pipeline {

    name "Test pre-demultiplexed barcode directory discovery"
    script "../main.nf"

    test("Should discover and process pre-demultiplexed barcode folders") {

        when {
            params {
                // Use barcode directory input
                barcode_input_dir = "$projectDir/tests/test_data/barcode_structure"
                outdir = "$outputDir"
                
                // Provide required input parameter (empty samplesheet for barcode mode)
                input = "$projectDir/tests/empty_samplesheet.csv"
                pod5_input_dir = null
                use_dorado = false
                realtime_mode = false
                
                // Disable advanced features for focused testing
                kraken2_db = null
                blast_validation = false
                
                // Resource limits
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '1.h'
            }
        }

        then {
            assert workflow.success
            assert snapshot(file("${outputDir}/pipeline_info/software_versions.yml")).match("software_versions")
            assert workflow.trace.tasks().size() > 0

            // Check QC ran for multiple barcode samples (barcode01, barcode02, unclassified)
            def fastp_tasks = workflow.trace.tasks().findAll { it.name.contains('CHOPPER') || it.name.contains('FASTP') || it.name.contains('FILTLONG') }
            assert fastp_tasks.size() >= 2  // At least 2 barcodes discovered and processed

            // Check output structure
            assert path("${outputDir}/results/fastp").exists()
            assert path("${outputDir}/results/multiqc").exists()
        }
    }

    test("Should handle empty barcode directories gracefully") {

        when {
            params {
                barcode_input_dir = "$outputDir/empty_barcodes"
                outdir = "$outputDir"
                
                // Resource limits
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '1.h'
            }
        }

        then {
            // Should fail gracefully or skip processing
            assert workflow.failed || workflow.trace.tasks().size() == 0
        }
    }
}