nextflow_pipeline {

    name "Test Dorado basecalling with POD5 data"
    script "../main.nf"

    test("Should run Dorado basecalling with nf-core POD5 data") {

        when {
            params {
                // Create empty samplesheet for Dorado-only mode
                input = "$projectDir/tests/empty_samplesheet.csv"
                outdir = "$outputDir"
                
                // Enable Dorado with POD5 input
                use_dorado = true
                dorado_path = params.dorado_path ?: '/usr/local/bin/dorado'
                pod5_input_dir = "$projectDir/assets/test_data/minimal_nanoseq/pod5"
                dorado_model = 'dna_r10.4.1_e4.3_400bps_fast@v4.1.0'
                
                // Single sample (no demultiplexing)
                demultiplex = false
                min_qscore = 7
                
                // Disable other features for focused Dorado testing
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                
                // Resource limits for testing
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '15.min'
            }
        }

        then {
            assert workflow.success
            
            // Check that Dorado processes ran
            assert workflow.trace.tasks().any { it.name.contains('DORADO') }
            
            // Should also run QC on basecalled reads
            assert workflow.trace.tasks().any { it.name.contains('FASTP') || it.name.contains('NANOPLOT') }
        }
    }

    test("Should run Dorado with demultiplexing") {

        when {
            params {
                input = "$projectDir/tests/empty_samplesheet.csv"
                outdir = "$outputDir"
                
                // Enable Dorado with demultiplexing
                use_dorado = true
                dorado_path = params.dorado_path ?: '/usr/local/bin/dorado'
                pod5_input_dir = "$projectDir/assets/test_data/minimal_nanoseq/pod5"
                dorado_model = 'dna_r10.4.1_e4.3_400bps_fast@v4.1.0'
                
                // Enable demultiplexing
                demultiplex = true
                barcode_kit = 'SQK-RBK004'
                trim_barcodes = true
                min_qscore = 7
                
                // Disable other features
                realtime_mode = false
                kraken2_db = null
                blast_validation = false
                
                // Quick test limits
                max_cpus = 2
                max_memory = '4.GB'
                max_time = '10.min'
            }
        }

        then {
            assert workflow.success
            
            // Check that Dorado basecalling and demux processes ran
            assert workflow.trace.tasks().any { it.name.contains('DORADO_BASECALLER') }
            assert workflow.trace.tasks().any { it.name.contains('DORADO_DEMUX') }
        }
    }

    test("Should validate POD5 directory parameter") {

        when {
            params {
                input = "$projectDir/tests/empty_samplesheet.csv"
                outdir = "$outputDir"
                
                // Test parameter validation with non-existent POD5 dir
                use_dorado = true
                dorado_path = params.dorado_path ?: '/usr/local/bin/dorado'
                pod5_input_dir = "/non/existent/path"
                
                // Quick validation test
                max_cpus = 1
                max_memory = '2.GB'
                max_time = '2.min'
            }
        }

        then {
            // Should fail gracefully with validation error
            assert !workflow.success
            assert workflow.exitStatus != 0
        }
    }
}