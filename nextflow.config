/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    foi-bioinformatics/nanometanf Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    
    // Real-time processing options
    realtime_mode              = false
    nanopore_output_dir        = null
    file_pattern               = "*.fastq{,.gz}"  // Match FASTQ files in root directory (most common for nanopore)
    batch_size                 = 10
    batch_interval             = "5min"  // Legacy parameter (deprecated)
    max_files                  = null
    realtime_timeout_minutes   = null    // Stop real-time monitoring after N minutes of inactivity (null = run indefinitely)
    realtime_processing_grace_period = 5 // Additional minutes to wait for downstream processing after file detection timeout (default: 5)

    // Enhanced real-time monitoring options (Section 3.2)
    watch_directories          = null    // List of directories to monitor (supports multiple)
    priority_samples           = []      // List of high-priority sample IDs
    enable_realtime_stats      = true    // Enable snapshot and cumulative statistics
    realtime_report_interval   = 30000   // Report refresh interval in milliseconds

    // Enhanced monitoring features (Section 3.2)
    enable_enhanced_monitoring = false   // Enable enhanced real-time monitoring with all features
    file_stability_time        = 5       // File stability check time in seconds (file locking detection)
    max_file_retries           = 3       // Maximum retry attempts for file processing
    watchdog_timeout           = 3600    // Watchdog timeout in seconds (1 hour = 3600s)
    enable_progress_dashboard  = true    // Enable real-time progress tracking dashboard

    // Error handling and retry logic (Section 3.3)
    enable_error_handler       = false   // Enable comprehensive error handling with retry logic
    error_base_delay           = 2       // Base delay for exponential backoff (seconds)
    error_max_delay            = 300     // Maximum backoff delay (seconds, 5 minutes)
    error_backoff_factor       = 2.0     // Exponential backoff growth factor
    error_max_retries          = 10      // Maximum retry attempts before dead letter queue
    circuit_breaker_threshold  = 5       // Number of failures to trigger circuit breaker
    circuit_breaker_window     = 300     // Time window for failure counting (seconds, 5 minutes)
    
    // Advanced batching configuration
    adaptive_batching          = true    // Enable intelligent batch sizing
    min_batch_size             = 1       // Minimum files per batch
    max_batch_size             = 50      // Maximum files per batch
    batch_size_factor          = 1.0     // Multiplier for dynamic batch sizing
    
    // Performance monitoring thresholds
    min_files_per_second       = 0.1     // Alert threshold for processing speed
    max_avg_file_age_minutes   = 10      // Alert threshold for file latency
    min_compression_ratio      = 0.3     // Alert threshold for data quality
    
    // Input type options
    barcode_input_dir          = null   // Directory containing pre-demultiplexed barcode folders
    
    // Dorado basecalling and demultiplexing options
    use_dorado                 = false  // Enable Dorado basecalling (default: false)
    dorado_path                = 'dorado'  // Path to dorado binary (default: search in PATH)
    dorado_model               = 'dna_r10.4.1_e4.3_400bps_hac' // Dorado basecalling model (v1.1+ simplified syntax)
    dorado_device              = 'auto' // GPU device: 'auto', 'cpu', 'metal', 'cuda:all', or 'cuda:<device_id>'
    pod5_input_dir             = null   // Directory containing POD5 files for basecalling
    barcode_kit                = null   // Barcode kit for demultiplexing (e.g., 'SQK-NBD114-24')
    demultiplex                = false  // Enable demultiplexing (requires barcode_kit)
    min_qscore                 = 9      // Minimum quality score for basecalling
    trim_adapters              = true   // Trim adapters during basecalling (recommended by ONT)
    trim_barcodes              = true   // Trim barcodes during demultiplexing
    
    // Taxonomic classification options
    classifier                 = 'kraken2'   // Taxonomic classifier: kraken2 (future: centrifuge, metaphlan, kaiju)
    kraken2_db                 = null        // Path to Kraken2/classifier database
    save_output_fastqs         = false       // Save classified/unclassified FASTQ files
    save_reads_assignment      = false       // Save read-level taxonomic assignments

    // Kraken2 optimization options (Section 4.1)
    kraken2_use_optimizations  = false       // Enable Kraken2 performance optimizations
    kraken2_memory_mapping     = false       // Use memory-mapped database loading (faster, less memory)
    kraken2_confidence         = 0.0         // Confidence score threshold (0.0-1.0, 0=no filter)
    kraken2_minimum_hit_groups = 0           // Minimum number of hit groups (0=no filter)
    kraken2_batch_size         = 10          // Batch size for parallel classification
    kraken2_db_chunking        = false       // Enable database chunking for large datasets
    kraken2_db_merge_strategy  = 'union'     // Merge strategy: union, intersection, consensus

    // Kraken2 incremental processing options (PromethION optimization)
    kraken2_enable_incremental = false       // Enable incremental classification (cache batch outputs, avoid re-classification)
    kraken2_cache_dir          = null        // Cache directory for incremental outputs (default: ${outdir}/cache/kraken2)
    kraken2_preload_database   = false       // Preload DB to shared memory for multi-sample runs (reduces RAM 24x)
    
    // Taxpasta standardization options  
    enable_taxpasta_standardization = true  // Enable taxpasta output standardization
    taxpasta_format            = 'tsv'      // Output format: tsv, csv, arrow, parquet, biom
    taxonomy_file              = null       // Optional taxonomy file for taxpasta
    
    // BLAST validation options
    blast_validation           = false
    blast_db                   = null
    validation_taxa            = null // List of taxa to validate
    
    // Assembly options
    enable_assembly            = false       // Enable genome assembly step
    assembler                  = 'flye'     // Genome assembler: flye, miniasm (future: canu, raven, shasta)
    genome_size                = '5m'       // Expected genome size (for flye, canu)
    sequencing_mode            = '--nano-raw' // Sequencing mode for flye: --nano-raw, --nano-corr, --nano-hq, --pacbio-raw, --pacbio-corr, --pacbio-hifi
    
    // Quality control options
    qc_tool                    = 'chopper'  // QC tool: chopper (default), fastp, filtlong
    enable_adapter_trimming    = false      // Enable nanopore adapter trimming with PORECHOP (for filtlong/chopper)
    enable_qc_benchmark        = false      // Enable QC tool performance benchmarking
    skip_fastp                 = false      // Legacy parameter for backward compatibility
    skip_nanoplot              = false      // Skip NanoPlot visualization
    enable_nanoplot_comparison = false      // Enable multi-sample NanoPlot comparison
    skip_multiqc               = false      // Skip MultiQC report generation

    // QC incremental processing (PromethION optimization)
    qc_enable_incremental      = false      // Enable incremental QC stat aggregation
    nanoplot_realtime_skip_intermediate = true  // Skip NanoPlot for intermediate batches in real-time mode
    nanoplot_batch_interval    = 10         // Run NanoPlot every N batches (if not skipping all intermediate)
    multiqc_realtime_final_only = true      // Only run MultiQC at end of real-time session (avoids re-parsing)

    // FILTLONG-specific parameters
    filtlong_min_length        = 1000       // Minimum read length for FILTLONG
    filtlong_keep_percent      = 90         // Percentage of best reads to keep
    filtlong_target_bases      = 0          // Target number of bases (0 = no limit)
    filtlong_min_mean_q        = 8.0        // Minimum mean quality score
    
    // CHOPPER-specific parameters
    chopper_quality            = 10         // Minimum quality score for CHOPPER
    chopper_minlength          = 1000       // Minimum read length for CHOPPER
    chopper_maxlength          = null       // Maximum read length (null = no limit)
    chopper_headcrop           = 0          // Trim bases from read start
    chopper_tailcrop           = 0          // Trim bases from read end

    // FASTP-specific parameters
    fastp_qualified_quality    = 15         // Quality threshold for FASTP
    fastp_length_required      = 1000       // Minimum read length for FASTP
    fastp_cut_mean_quality     = 20         // Mean quality for sliding window

    // Dynamic resource allocation options (EXPERIMENTAL - disable for v1.0 stability)
    enable_dynamic_resources   = false      // Enable intelligent resource allocation (default: false for v1.0)
    optimization_profile       = 'auto'     // Resource optimization profile: auto, high_throughput, balanced, resource_conservative, gpu_optimized, realtime_optimized, development_testing
    resource_safety_factor     = 0.8        // Safety factor for resource allocation (0.0-1.0)
    max_parallel_jobs          = 4          // Maximum parallel jobs for resource optimization
    enable_gpu_optimization    = true       // Enable GPU-specific optimizations
    resource_monitoring_interval = 30       // System monitoring interval (seconds)
    enable_performance_logging = true       // Enable detailed performance logging
    resource_prediction_confidence = 0.7    // Minimum confidence for resource predictions

    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore            = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // MultiQC custom content options (Section 4.2)
    enable_multiqc_custom_content = true   // Enable nanopore-specific custom content
    enable_krona_plots            = true   // Generate Krona taxonomic visualization
    enable_dorado_mqc             = true   // Include Dorado basecalling stats in MultiQC
    enable_nanopore_stats_mqc     = true   // Include comprehensive nanopore statistics

    // Test coverage and quality options (Section 6.1)
    enable_test_coverage_tracking = false  // Enable test coverage monitoring
    enable_performance_benchmarks = false  // Enable performance regression testing
    test_coverage_threshold       = 95     // Minimum test coverage threshold (P0+P1)
    performance_regression_threshold = 0.1 // Performance regression threshold (10%)

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'
    trace_report_suffix          = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
    config_profile_name        = null
    config_profile_description = null

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Schema validation default options
    validate_params            = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    gpu {
        docker.runOptions       = '-u $(id -u):$(id -g) --gpus all'
        apptainer.runOptions    = '--nv'
        singularity.runOptions  = '--nv'
    }
    test         { includeConfig 'conf/test.config'         }
    test_full    { includeConfig 'conf/test_full.config'    }
    minion       { includeConfig 'conf/minion.config'       }
    promethion_8 { includeConfig 'conf/promethion_8.config' }
    promethion   { includeConfig 'conf/promethion.config'   }
}

// Load nf-core custom profiles from different institutions

// If params.custom_config_base is set AND either the NXF_OFFLINE environment variable is not set or params.custom_config_base is a local path, the nfcore_custom.config file from the specified base path is included.
// Load foi-bioinformatics/nanometanf custom profiles from different institutions.
includeConfig params.custom_config_base && (!System.getenv('NXF_OFFLINE') || !params.custom_config_base.startsWith('http')) ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"


// Load foi-bioinformatics/nanometanf custom profiles from different institutions.
// Custom nf-core config for nanometanf can be added at: https://github.com/nf-core/configs
// NOTE: nanometanf is not yet an official nf-core pipeline, so remote config is disabled
// includeConfig params.custom_config_base && (!System.getenv('NXF_OFFLINE') || !params.custom_config_base.startsWith('http')) ? "${params.custom_config_base}/pipeline/nanometanf.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'

// Load igenomes.config if required
includeConfig !params.igenomes_ignore ? 'conf/igenomes.config' : 'conf/igenomes_ignored.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name            = 'foi-bioinformatics/nanometanf'
    contributors    = [
        [
            name: 'Andreas Sjödin',
            affiliation: 'Swedish Defence Research Agency (FOI), CBRN Defence and Security',
            email: 'andreas.sjodin@foi.se',
            github: 'andreassjodin',
            contribution: ['author', 'maintainer'],
            orcid: '0000-0002-9268-7345'
        ],
    ]
    homePage        = 'https://github.com/foi-bioinformatics/nanometanf'
    description     = """Backend of Nanometa-Live"""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=24.10.5'
    version         = '1.3.0'
    doi             = ''
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.4.2' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

validation {
    defaultIgnoreParams = ["genomes"]
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run foi-bioinformatics/nanometanf -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load QC strategy profiles for nanopore data
includeConfig 'conf/qc_profiles.config'
