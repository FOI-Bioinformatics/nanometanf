nextflow_process {
    name "Test Process KRAKEN2_INCREMENTAL_CLASSIFIER"
    script "../main.nf"
    process "KRAKEN2_INCREMENTAL_CLASSIFIER"
    tag "modules"
    tag "modules_local"
    tag "kraken2_incremental_classifier"
    tag "kraken2"
    tag "incremental"

    test("sarscov2 single-end [fastq] - batch 0 - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true, batch_id:0 ],
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                input[2] = false
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("sarscov2 paired-end [fastq] - batch 1 - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false, batch_id:1 ],
                    [
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
                    ]
                ]
                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                input[2] = false
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.raw_kraken2_output,
                    process.out.report,
                    process.out.batch_metadata,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("sarscov2 single-end [fastq] - save_output_fastqs - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true, batch_id:0 ],
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                input[2] = true
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.classified_reads_fastq },
                { assert process.out.unclassified_reads_fastq },
                { assert process.out.classified_reads_fastq.get(0).get(1) ==~ ".*/test_batch0.classified.fastq.gz" },
                { assert process.out.unclassified_reads_fastq.get(0).get(1) ==~ ".*/test_batch0.unclassified.fastq.gz" }
            )
        }
    }

    test("sarscov2 paired-end [fastq] - save_output_fastqs - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false, batch_id:2 ],
                    [
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                        file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
                    ]
                ]
                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                input[2] = true
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.classified_reads_fastq },
                { assert process.out.unclassified_reads_fastq },
                { assert process.out.classified_reads_fastq.get(0).get(1).get(0) ==~ ".*/test_batch2.classified_1.fastq.gz" },
                { assert process.out.classified_reads_fastq.get(0).get(1).get(1) ==~ ".*/test_batch2.classified_2.fastq.gz" },
                { assert process.out.unclassified_reads_fastq.get(0).get(1).get(0) ==~ ".*/test_batch2.unclassified_1.fastq.gz" },
                { assert process.out.unclassified_reads_fastq.get(0).get(1).get(1) ==~ ".*/test_batch2.unclassified_2.fastq.gz" }
            )
        }
    }

    test("sarscov2 single-end [fastq] - save_reads_assignment - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true, batch_id:0 ],
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                input[2] = false
                input[3] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.classified_reads_assignment },
                { assert process.out.classified_reads_assignment.get(0).get(1) ==~ ".*/test_batch0.kraken2.classifiedreads.txt" }
            )
        }
    }

    test("sarscov2 single-end [fastq] - batch_metadata validation - stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'sample1', single_end:true, batch_id:5 ],
                    [ file(params.modules_testdata_base_path + "genomics/sarscov2/illumina/fastq/test_1.fastq.gz", checkIfExists: true) ]
                ]
                input[1] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                input[2] = false
                input[3] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.batch_metadata },
                { assert process.out.batch_metadata.get(0).get(1) ==~ ".*/batch_metadata.json" }
            )
        }
    }
}
