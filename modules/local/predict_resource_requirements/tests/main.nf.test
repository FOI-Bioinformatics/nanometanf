nextflow_process {

    name "Test PREDICT_RESOURCE_REQUIREMENTS"
    script "../main.nf"
    process "PREDICT_RESOURCE_REQUIREMENTS"

    tag "modules"
    tag "modules_local"
    tag "predict_resource_requirements"

    test("Should predict resource requirements from input characteristics") {

        tag "resource_prediction"
        tag "snapshot"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'test_prediction',
                        single_end: true
                    ],
                    file('$projectDir/tests/fixtures/characteristics/small_fastq.json'),
                    file('$projectDir/tests/fixtures/system_metrics/normal_load.json')
                ]
                input[1] = [
                    prediction_model: 'gradient_boost',
                    confidence_threshold: 0.7,
                    tool_specific_prediction: true
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Should predict resources with ML model") {

        tag "ml_prediction"
        tag "snapshot"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'ml_prediction_test',
                        single_end: true,
                        tool: 'fastp'
                    ],
                    file('$projectDir/tests/fixtures/characteristics/large_fastq.json'),
                    file('$projectDir/tests/fixtures/system_metrics/high_load.json')
                ]
                input[1] = [
                    prediction_model: 'random_forest',
                    enable_ml_prediction: true,
                    predict_cpu: true,
                    predict_memory: true,
                    predict_runtime: true
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Should handle tool-specific predictions") {

        tag "tool_specific"
        tag "snapshot"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'tool_specific_test',
                        single_end: true,
                        tool: 'nanoplot'
                    ],
                    file('$projectDir/tests/fixtures/characteristics/medium_fastq.json'),
                    file('$projectDir/tests/fixtures/system_metrics/normal_load.json')
                ]
                input[1] = [
                    prediction_model: 'linear_regression',
                    tool_specific_prediction: true,
                    scaling_factors: [
                        cpu_factor: 1.2,
                        memory_factor: 1.5,
                        runtime_factor: 0.8
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Should handle prediction confidence thresholds") {

        tag "confidence"
        tag "snapshot"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'confidence_test',
                        single_end: true
                    ],
                    file('$projectDir/tests/fixtures/characteristics/minimal_file.json'),
                    file('$projectDir/tests/fixtures/system_metrics/normal_load.json')
                ]
                input[1] = [
                    prediction_model: 'gradient_boost',
                    confidence_threshold: 0.9,
                    fallback_prediction: true,
                    uncertainty_handling: 'conservative'
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Should handle edge cases and fallbacks") {

        tag "edge_cases"
        tag "snapshot"

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'edge_case_test',
                        single_end: true
                    ],
                    file('$projectDir/tests/fixtures/characteristics/empty_file.json'),
                    file('$projectDir/tests/fixtures/system_metrics/normal_load.json')
                ]
                input[1] = [
                    prediction_model: 'fallback',
                    confidence_threshold: 0.5,
                    fallback_prediction: true,
                    min_resources: [
                        min_cpu: 1,
                        min_memory: '1.GB',
                        min_runtime: '5.min'
                    ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Should run in stub mode") {

        when {
            process {
                """
                input[0] = [
                    [
                        id: 'stub_test',
                        single_end: true
                    ],
                    [],
                    []
                ]
                input[1] = [
                    prediction_model: 'gradient_boost'
                ]
                """
            }

            stub true
        }

        then {
            assert process.success
            assert process.out.predictions.size() == 1
            assert process.out.versions.size() == 1
        }
    }
}