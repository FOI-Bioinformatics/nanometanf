nextflow_process {
    name "Test Process KRAKEN2_REPORT_GENERATOR"
    script "../main.nf"
    process "KRAKEN2_REPORT_GENERATOR"
    tag "modules"
    tag "modules_local"
    tag "kraken2_report_generator"
    tag "kraken2"
    tag "incremental"
    tag "krakentools"

    test("generate report from 2 batches - stub") {
        options "-stub"

        when {
            process {
                """
                // Mock cumulative output file
                def cumulative = file("sample1.cumulative.kraken2.output.txt")
                cumulative.text = '''C\tread1\t12345\t100\t12345:1
U\tread2\t0\t100\t0:100
C\tread3\t67890\t100\t67890:1
C\tread4\t12345\t100\t12345:1
'''

                input[0] = [
                    [ id:'sample1' ],
                    cumulative
                ]

                // Mock batch report files
                def report0 = file("sample1_batch0.kraken2.report.txt")
                report0.text = '''100.00\t4\t4\tU\t0\tunclassified
  50.00\t2\t0\tR\t1\troot
  50.00\t2\t2\tD\t12345\tBacteria
'''

                def report1 = file("sample1_batch1.kraken2.report.txt")
                report1.text = '''100.00\t2\t0\tU\t0\tunclassified
  50.00\t1\t0\tR\t1\troot
  50.00\t1\t1\tD\t67890\tViruses
'''

                input[1] = [
                    [ id:'sample1' ],
                    [ report0, report1 ]
                ]

                // Mock database directory
                input[2] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("generate report from 3 batches - stub") {
        options "-stub"

        when {
            process {
                """
                def cumulative = file("sample2.cumulative.kraken2.output.txt")
                cumulative.text = '''C\tread1\t12345\t100\t12345:1
C\tread2\t12345\t100\t12345:1
C\tread3\t67890\t100\t67890:1
U\tread4\t0\t100\t0:100
C\tread5\t11111\t100\t11111:1
C\tread6\t12345\t100\t12345:1
'''

                input[0] = [
                    [ id:'sample2' ],
                    cumulative
                ]

                def report0 = file("sample2_batch0.kraken2.report.txt")
                report0.text = '''100.00\t2\t0\tR\t1\troot'''

                def report1 = file("sample2_batch1.kraken2.report.txt")
                report1.text = '''100.00\t2\t0\tR\t1\troot'''

                def report2 = file("sample2_batch2.kraken2.report.txt")
                report2.text = '''100.00\t2\t0\tR\t1\troot'''

                input[1] = [
                    [ id:'sample2' ],
                    [ report0, report1, report2 ]
                ]

                input[2] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.report },
                { assert process.out.stats },
                { assert snapshot(
                    process.out.report,
                    process.out.stats,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("generate report - single batch edge case - stub") {
        options "-stub"

        when {
            process {
                """
                def cumulative = file("sample3.cumulative.kraken2.output.txt")
                cumulative.text = '''C\tread1\t12345\t100\t12345:1
U\tread2\t0\t100\t0:100
'''

                input[0] = [
                    [ id:'sample3' ],
                    cumulative
                ]

                def report0 = file("sample3_batch0.kraken2.report.txt")
                report0.text = '''100.00\t2\t0\tR\t1\troot
  50.00\t1\t1\tD\t12345\tBacteria
  50.00\t1\t1\tU\t0\tunclassified
'''

                input[1] = [
                    [ id:'sample3' ],
                    [ report0 ]
                ]

                input[2] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.report },
                { assert process.out.stats }
            )
        }
    }

    test("verify statistics calculation - stub") {
        options "-stub"

        when {
            process {
                """
                // Create cumulative output with known counts
                def cumulative = file("sample4.cumulative.kraken2.output.txt")
                cumulative.text = '''C\tread1\t12345\t100\t12345:1
C\tread2\t12345\t100\t12345:1
C\tread3\t67890\t100\t67890:1
U\tread4\t0\t100\t0:100
U\tread5\t0\t100\t0:100
C\tread6\t11111\t100\t11111:1
C\tread7\t12345\t100\t12345:1
C\tread8\t67890\t100\t67890:1
U\tread9\t0\t100\t0:100
C\tread10\t12345\t100\t12345:1
'''
                // Expected: 10 total reads, 7 classified, 3 unclassified

                input[0] = [
                    [ id:'sample4' ],
                    cumulative
                ]

                def report0 = file("sample4_batch0.kraken2.report.txt")
                report0.text = '''100.00\t5\t0\tR\t1\troot'''

                def report1 = file("sample4_batch1.kraken2.report.txt")
                report1.text = '''100.00\t5\t0\tR\t1\troot'''

                input[1] = [
                    [ id:'sample4' ],
                    [ report0, report1 ]
                ]

                input[2] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.report },
                { assert process.out.stats }
            )
        }
    }

    test("metadata preservation - stub") {
        options "-stub"

        when {
            process {
                """
                def cumulative = file("special.cumulative.kraken2.output.txt")
                cumulative.text = '''C\tread1\t12345\t100\t12345:1\n'''

                input[0] = [
                    [ id:'special_sample', single_end:true, sequencer:'MinION' ],
                    cumulative
                ]

                def report0 = file("special_batch0.kraken2.report.txt")
                report0.text = '''100.00\t1\t0\tR\t1\troot'''

                input[1] = [
                    [ id:'special_sample', single_end:true, sequencer:'MinION' ],
                    [ report0 ]
                ]

                input[2] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.report.get(0).get(0).id == 'special_sample' },
                { assert process.out.report.get(0).get(0).single_end == true },
                { assert process.out.report.get(0).get(0).sequencer == 'MinION' }
            )
        }
    }

    test("large scale - 10 batches - stub") {
        options "-stub"

        when {
            process {
                """
                // Generate cumulative output with 100 reads
                def lines = []
                (1..100).each { i ->
                    def taxid = (i % 3 == 0) ? "0" : "12345"
                    def type = (i % 3 == 0) ? "U" : "C"
                    lines << "\${type}\\tread\${i}\\t\${taxid}\\t100\\t\${taxid}:1"
                }

                def cumulative = file("sample_large.cumulative.kraken2.output.txt")
                cumulative.text = lines.join("\\n")

                input[0] = [
                    [ id:'sample_large' ],
                    cumulative
                ]

                // Generate 10 batch reports
                def reports = []
                (0..9).each { i ->
                    def report = file("sample_large_batch\${i}.kraken2.report.txt")
                    report.text = '''100.00\t10\t0\tR\t1\troot'''
                    reports << report
                }

                input[1] = [
                    [ id:'sample_large' ],
                    reports
                ]

                input[2] = file(params.modules_testdata_base_path + "genomics/sarscov2/genome/db/kraken2.tar.gz", checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.report },
                { assert process.out.stats }
            )
        }
    }
}
